#! /usr/bin/env perl

use strict;

use GitModules;

use Getopt::Long;
use Cwd;
use Cwd 'chdir';

use File::Basename;
use threads;
use Thread::Queue;

my $scriptName = basename($0);

my $destReposDir;
my $j;
my $help;
my $debugMode;

GetOptions("destReposDir=s" => \$destReposDir, #destination directory
           "j:i" => \$j, #run commands in parallel
           "debugMode" => \$debugMode, 
           "help|?" => \$help,
    ) or printHelp();

printHelp() if($help);

sub printHelp {
  print("\n$scriptName [-j [numb]] --destReposDir <dest> [--help|?]\n");
  print("\t-j [numb]: run commands in parallel\n");
  print("\t--debugMode: turn on debugMode (off by default)\n");
  print("\nNOTE: you must create the destination dir.");
  print("\n\n");
  exit 1;
}

if(! defined($destReposDir)) {
  print("ERROR: need a destination...\n");
  printHelp();
}

my $pwd = cwd();

if(! chdir($destReposDir)) {
  print("ERROR: could not cd to destReposDir: $destReposDir\n");
  printHelp();
}
my $destDirFull = cwd();
print("\nINFO: Copying .git repos to $destDirFull\n\n");

if(! chdir($pwd)) {
  print("ERROR: can not chdir to $pwd\n");
  printHelp();
}

my $failures = Thread::Queue->new();

sub run {
  my $here = $_[0];
  if(!chdir($here)) {
    print("\nERROR: cannot chdir to $here\n\n");
    return(1);
  }
  my $repoName = basename($here);
  print("\nRunning $scriptName in $here\n");
  my $command = "mkdir ${destDirFull}/$repoName";
  print("Running command $command in $here.\n");
  if(system($command)) {
    my $err = "\nERROR: $command failed in $here,\n";
    print("$err");
    $failures->enqueue($err);
    return(2);
  }
  $command = "cp -r $here/.git $destDirFull/$repoName";
  print("Running command $command in $here.\n");
  if(system($command)) {
    my $err = "\nERROR: $command failed in $here,\n";
    print("$err");
    $failures->enqueue($err);
    return(2);
  }
  print("SUCCESS in $here\n");
  return(0);
}

my $fail = GitModules::runCmd(\&run, $j, $debugMode);

if(!$fail) {
  print("\n$scriptName completed successfully\n\n");
  exit(0);
}
print("\nERROR: $scriptName FAILED\n\n");

my $errDone = "0";
while(!$errDone) {
  if(defined(my $err = $failures->dequeue_nb())) {
    print("\n$err\n");
  } else {
    $errDone = "1";
  }
}
exit(1);
